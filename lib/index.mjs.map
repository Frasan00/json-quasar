{"version":3,"sources":["../src/Rule/RuleTypes.ts","../src/Rule/RuleBuilder/RuleBuilderDataType/AbstractDataRuleBuilder.ts","../src/Rule/RuleBuilder/RuleBuilderDataType/StringBuilder.ts","../src/Rule/RuleBuilder/RuleBuilderDataType/NumberBuilder.ts","../src/Rule/RuleBuilder/RuleBuilderDataType/BooleanBuilder.ts","../src/Rule/RuleBuilder/RuleBuilderDataType/ObjectBuilder.ts","../src/Rule/RuleBuilder/RuleBuilderDataType/FunctionBuilder.ts","../src/Rule/RuleBuilder/RuleBuilderDataType/DateBuilder.ts","../src/Rule/RuleError.ts","../src/Rule/RuleBuilder/RuleBuilderParser.ts","../src/Validator/Validator.ts","../src/Rule/Rule.ts","../src/Rule/RuleBuilder/RuleBuilderDataType/ArrayBuilder.ts","../src/Rule/RuleBuilder/RuleBuilder.ts","../src/Validator/ValidatorSchema.ts"],"sourcesContent":["export type RuleType = {\n  type?: RuleDataTypes;\n  inputOptions?: OptionType;\n\n  message?: string;\n\n  required?: boolean;\n  optional?: boolean;\n  nullable?: boolean;\n\n  min?: number;\n  max?: number;\n\n  // number\n  range?: [number, number];\n  integer?: boolean;\n  float?: boolean;\n  positive?: boolean;\n  negative?: boolean;\n\n  // date\n  before?: Date;\n  after?: Date;\n  beforeOrEqual?: Date;\n  afterOrEqual?: Date;\n\n  // string\n  email?: boolean;\n  url?: boolean;\n  uuid?: boolean;\n  ip?: boolean;\n  regex?: RegExp;\n\n  // array and object\n  members?: RuleType;\n\n  // function\n  returns?: RuleDataTypes;\n};\n\nexport type OptionType = {\n  trim?: boolean;\n  lowercase?: boolean;\n  uppercase?: boolean;\n  pascalCase?: boolean;\n  camelCase?: boolean;\n  snakeCase?: boolean;\n};\n\nexport type RuleDataTypes =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"object\"\n  | \"function\"\n  | \"Date\"\n  | \"Array\"\n  | \"alphaNumeric\";\n\nexport const ValidationErrors = {\n  requiredAndOptional: \"Rule cannot be required and optional at the same time\",\n  integerAndFloat: \"Rule cannot be integer and float at the same time\",\n  positiveAndNegative: \"Rule cannot be positive and negative at the same time\",\n  invalidRange: \"Invalid range\",\n\n  type: (prop: any, type: string) =>\n    `Invalid type provided for ${prop}, expected ${type}`,\n\n  required: (prop: any) => `${prop} is required`,\n\n  min: (prop: any, min: number) => `Minimum for property ${prop} is ${min}`,\n  max: (prop: any, max: number) => `Maximum for property ${prop} is ${max}`,\n\n  range: (prop: number, min: number, max: number) =>\n    `Range for property ${prop} is ${min} - ${max}`,\n  integer: (prop: number) => `Property ${prop} must be an integer`,\n  float: (prop: number) => `Property ${prop} must be a float`,\n  positive: (prop: number) => `Property ${prop} must be positive`,\n  negative: (prop: number) => `Property ${prop} must be negative`,\n\n  email: (prop: string) => `Invalid email provided for ${prop}`,\n  url: (prop: string) => `Invalid url provided for ${prop}`,\n  uuid: (prop: string) => `Invalid uuid provided for ${prop}`,\n  ip: (prop: string) => `Invalid ip provided for ${prop}`,\n  regex: (prop: string) => `Invalid regex provided for ${prop}`,\n\n  before: (prop: Date, date: Date) => `Date ${prop} must be before ${date}`,\n  after: (prop: Date, date: Date) => `Date ${prop} must be after ${date}`,\n  beforeOrEqual: (prop: Date, date: Date) =>\n    `Date ${prop} must be before or equal to ${date}`,\n  afterOrEqual: (prop: Date, date: Date) =>\n    `Date ${prop} must be after or equal to ${date}`,\n\n  returns: (prop: string, type: string) =>\n    `Function ${prop} must return ${type}`,\n\n  arrayMembers: (prop: string, type: string) =>\n    `Array ${prop} must contain members of type ${type}`,\n};\n","import Rule from \"../../Rule\";\nimport { ValidationErrors } from \"../../RuleTypes\";\n\nexport default abstract class AbstractDataRuleBuilder {\n  protected rule: Rule;\n  protected constructor(rule: Rule) {\n    this.rule = rule;\n  }\n\n  public message(message: string): this {\n    this.rule.setRule({ message });\n    return this;\n  }\n\n  public required(): this {\n    if (this.rule.getRule().optional) {\n      throw new Error(ValidationErrors.requiredAndOptional);\n    }\n\n    this.rule.setRule({ required: true });\n    return this;\n  }\n\n  /**\n   * @description Optional by default, this can be used for better readability\n   */\n  public optional(): this {\n    if (this.rule.getRule().optional) {\n      throw new Error(ValidationErrors.requiredAndOptional);\n    }\n\n    this.rule.setRule({ optional: true });\n    return this;\n  }\n\n  /**\n   * @description Sets if a value can be null\n   */\n  public nullable(): this {\n    this.rule.setRule({ nullable: true });\n    return this;\n  }\n\n  public getRule(): Rule {\n    return this.rule;\n  }\n}\n","import Rule from \"../../Rule\";\nimport AbstractDataRuleBuilder from \"./AbstractDataRuleBuilder\";\n\nexport default class StringBuilder extends AbstractDataRuleBuilder {\n  public constructor(rule: Rule) {\n    super(rule);\n  }\n\n  public min(min: number): StringBuilder {\n    this.rule.setRule({ min });\n    return this;\n  }\n\n  public max(max: number): StringBuilder {\n    this.rule.setRule({ max });\n    return this;\n  }\n\n  public trim(): this {\n    const inputOptions = this.rule.getRule().inputOptions;\n    this.rule.setRule({ inputOptions: { ...inputOptions, trim: true } });\n    return this;\n  }\n\n  public lowercase(): this {\n    const inputOptions = this.rule.getRule().inputOptions;\n    this.rule.setRule({ inputOptions: { ...inputOptions, lowercase: true } });\n    return this;\n  }\n\n  public uppercase(): this {\n    const inputOptions = this.rule.getRule().inputOptions;\n    this.rule.setRule({ inputOptions: { ...inputOptions, uppercase: true } });\n    return this;\n  }\n\n  public pascalCase(): this {\n    const inputOptions = this.rule.getRule().inputOptions;\n    this.rule.setRule({ inputOptions: { ...inputOptions, pascalCase: true } });\n    return this;\n  }\n\n  public camelCase(): this {\n    const inputOptions = this.rule.getRule().inputOptions;\n    this.rule.setRule({\n      inputOptions: {\n        ...inputOptions,\n        camelCase: true,\n      },\n    });\n    return this;\n  }\n\n  public snakeCase(): this {\n    const inputOptions = this.rule.getRule().inputOptions;\n    this.rule.setRule({\n      inputOptions: {\n        ...inputOptions,\n        snakeCase: true,\n      },\n    });\n    return this;\n  }\n\n  public email(): this {\n    this.rule.setRule({ email: true });\n    return this;\n  }\n\n  public url(): this {\n    this.rule.setRule({ url: true });\n    return this;\n  }\n\n  public uuid(): this {\n    this.rule.setRule({ uuid: true });\n    return this;\n  }\n\n  public ip(): this {\n    this.rule.setRule({ ip: true });\n    return this;\n  }\n\n  public regex(regex: RegExp): this {\n    this.rule.setRule({ regex });\n    return this;\n  }\n}\n","import Rule from \"../../Rule\";\nimport { ValidationErrors } from \"../../RuleTypes\";\nimport AbstractDataRuleBuilder from \"./AbstractDataRuleBuilder\";\n\nexport default class NumberBuilder extends AbstractDataRuleBuilder {\n  public constructor(rule: Rule) {\n    super(rule);\n  }\n\n  public range(range: [number, number]): NumberBuilder {\n    this.rule.setRule({ range });\n    return this;\n  }\n\n  public integer(): NumberBuilder {\n    if (this.rule.getRule().float) {\n      throw new Error(ValidationErrors.integerAndFloat);\n    }\n\n    this.rule.setRule({ integer: true });\n    return this;\n  }\n\n  public float(): NumberBuilder {\n    if (this.rule.getRule().integer) {\n      throw new Error(ValidationErrors.integerAndFloat);\n    }\n\n    this.rule.setRule({ float: true });\n    return this;\n  }\n\n  public positive(): NumberBuilder {\n    if (this.rule.getRule().negative) {\n      throw new Error(ValidationErrors.positiveAndNegative);\n    }\n\n    this.rule.setRule({ positive: true });\n    return this;\n  }\n\n  public negative(): NumberBuilder {\n    if (this.rule.getRule().positive) {\n      throw new Error(ValidationErrors.positiveAndNegative);\n    }\n\n    this.rule.setRule({ negative: true });\n    return this;\n  }\n}\n","import Rule from \"../../Rule\";\nimport AbstractDataRuleBuilder from \"./AbstractDataRuleBuilder\";\n\nexport default class BooleanBuilder extends AbstractDataRuleBuilder {\n  public constructor(rule: Rule) {\n    super(rule);\n  }\n}\n","import Rule from \"../../Rule\";\nimport AbstractDataRuleBuilder from \"./AbstractDataRuleBuilder\";\nimport { RuleType } from \"../../RuleTypes\";\nimport { ValidatorSchemaRule } from \"../../../Validator/ValidatorTypes\";\n\nexport default class ObjectBuilder extends AbstractDataRuleBuilder {\n  public constructor(rule: Rule) {\n    super(rule);\n  }\n\n  public members(members: AbstractDataRuleBuilder): AbstractDataRuleBuilder {\n    this.rule.setRule({ members: members.getRule().getRule() });\n    return this;\n  }\n}\n","import Rule from \"../../Rule\";\nimport AbstractDataRuleBuilder from \"./AbstractDataRuleBuilder\";\nimport { RuleDataTypes } from \"../../RuleTypes\";\nexport default class FunctionBuilder extends AbstractDataRuleBuilder {\n  public constructor(rule: Rule) {\n    super(rule);\n  }\n\n  public returns(returns: RuleDataTypes): FunctionBuilder {\n    this.rule.setRule({\n      returns,\n    });\n\n    return this;\n  }\n}\n","import Rule from \"../../Rule\";\nimport AbstractDataRuleBuilder from \"./AbstractDataRuleBuilder\";\n\nexport default class DateBuilder extends AbstractDataRuleBuilder {\n  public constructor(rule: Rule) {\n    super(rule);\n  }\n\n  public before(date: Date): DateBuilder {\n    this.rule.setRule({\n      before: date,\n    });\n\n    return this;\n  }\n\n  public after(date: Date): DateBuilder {\n    this.rule.setRule({\n      after: date,\n    });\n\n    return this;\n  }\n\n  public beforeOrEqual(date: Date): DateBuilder {\n    this.rule.setRule({\n      beforeOrEqual: date,\n    });\n\n    return this;\n  }\n\n  public afterOrEqual(date: Date): DateBuilder {\n    this.rule.setRule({\n      afterOrEqual: date,\n    });\n\n    return this;\n  }\n}\n","export default class RuleError extends Error {\n  customMessage?: string;\n  reason: string;\n\n  constructor(reason: string, customMessage?: string) {\n    super(customMessage ? customMessage : \"\");\n    Object.setPrototypeOf(this, RuleError.prototype);\n    this.customMessage = customMessage;\n    this.reason = reason;\n  }\n}\n","import { OptionType, RuleType, ValidationErrors } from \"../RuleTypes\";\nimport RuleError from \"../RuleError\";\nimport { InputBody } from \"../../Validator/ValidatorTypes\";\n\ntype BaseType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"object\"\n  | \"Function\"\n  | \"Date\"\n  | \"Array\";\n\ntype PropertyValueType =\n  | string\n  | number\n  | boolean\n  | object\n  | Function\n  | Date\n  | Array<any>\n  | null;\n\nclass RuleBuilderParser {\n  private checkIfRequired(\n    rule: RuleType,\n    inputBody: InputBody,\n    propertyValue: string,\n  ) {\n    if (\n      rule.required &&\n      Object.hasOwnProperty.call(inputBody, propertyValue) === false\n    ) {\n      throw new RuleError(\n        ValidationErrors.required(propertyValue),\n        rule.message,\n      );\n    }\n  }\n\n  private checkType(\n    propertyKey: string,\n    propertyValue: PropertyValueType,\n    type: BaseType,\n    message?: string,\n  ) {\n    switch (type) {\n      case \"string\":\n        if (typeof propertyValue !== \"string\") {\n          throw new RuleError(\n            ValidationErrors.type(propertyKey, \"string\"),\n            message,\n          );\n        }\n        break;\n      case \"number\":\n        if (typeof propertyValue !== \"number\") {\n          throw new RuleError(\n            ValidationErrors.type(propertyKey, \"number\"),\n            message,\n          );\n        }\n        break;\n      case \"boolean\":\n        if (typeof propertyValue !== \"boolean\") {\n          throw new RuleError(\n            ValidationErrors.type(propertyKey, \"boolean\"),\n            message,\n          );\n        }\n        break;\n      case \"object\":\n        if (typeof propertyValue !== \"object\") {\n          throw new RuleError(\n            ValidationErrors.type(propertyKey, \"object\"),\n            message,\n          );\n        }\n        break;\n      case \"Function\":\n        if (typeof propertyValue !== \"function\") {\n          throw new RuleError(\n            ValidationErrors.type(propertyKey, \"Function\"),\n            message,\n          );\n        }\n        break;\n      case \"Date\":\n        if (\n          typeof propertyValue !== \"object\" ||\n          !(propertyValue instanceof Date)\n        ) {\n          throw new RuleError(\n            ValidationErrors.type(propertyKey, \"Date\"),\n            message,\n          );\n        }\n        break;\n      case \"Array\":\n        if (\n          typeof propertyValue !== \"object\" ||\n          Array.isArray(propertyValue) === false\n        ) {\n          throw new RuleError(\n            ValidationErrors.type(propertyKey, \"Array\"),\n            message,\n          );\n        }\n        break;\n      default:\n        throw new RuleError(\n          ValidationErrors.type(propertyKey, \"unknown\"),\n          message,\n        );\n    }\n  }\n\n  public parseString(\n    propertyKey: string,\n    rule: RuleType,\n    inputBody: InputBody,\n  ): string | void {\n    this.checkIfRequired(rule, inputBody, propertyKey);\n    if (Object.hasOwnProperty.call(inputBody, propertyKey) === false) {\n      return;\n    }\n\n    if (rule.nullable && inputBody[propertyKey] === null) {\n      return;\n    }\n\n    this.checkType(propertyKey, inputBody[propertyKey], \"string\", rule.message);\n\n    let value = inputBody[propertyKey] as string;\n    if (rule.inputOptions) {\n      value = this.parseStringRuleOptions(value, rule.inputOptions);\n    }\n\n    if (rule.min && value.length < rule.min) {\n      throw new RuleError(ValidationErrors.min(value, rule.min), rule.message);\n    }\n\n    if (rule.max && value.length > rule.max) {\n      throw new RuleError(ValidationErrors.max(value, rule.max), rule.message);\n    }\n\n    if (rule.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n      throw new RuleError(ValidationErrors.email(value), rule.message);\n    }\n\n    if (\n      rule.url &&\n      !/^(?:https?:\\/\\/)?(?:www\\.)?[^\\s\\.]+\\.[^\\s]{2,}$/.test(value)\n    ) {\n      throw new RuleError(ValidationErrors.url(value), rule.message);\n    }\n\n    if (rule.uuid && !/^[a-f\\d]{8}(-[a-f\\d]{4}){4}[a-f\\d]{8}$/i.test(value)) {\n      throw new RuleError(ValidationErrors.uuid(value), rule.message);\n    }\n\n    if (rule.ip && !/^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/.test(value)) {\n      throw new RuleError(ValidationErrors.ip(value), rule.message);\n    }\n\n    if (rule.regex && !rule.regex.test(value)) {\n      throw new RuleError(ValidationErrors.regex(value), rule.message);\n    }\n\n    return value;\n  }\n\n  public parseNumber(\n    propertyKey: string,\n    rule: RuleType,\n    inputBody: InputBody,\n  ): void {\n    this.checkIfRequired(rule, inputBody, propertyKey);\n    if (Object.hasOwnProperty.call(inputBody, propertyKey) === false) {\n      return;\n    }\n\n    if (rule.nullable && inputBody[propertyKey] === null) {\n      return;\n    }\n\n    this.checkType(propertyKey, inputBody[propertyKey], \"number\", rule.message);\n\n    const value = inputBody[propertyKey] as number;\n    if (rule.min && value < rule.min) {\n      throw new RuleError(ValidationErrors.min(value, rule.min), rule.message);\n    }\n\n    if (rule.max && value > rule.max) {\n      throw new RuleError(ValidationErrors.max(value, rule.max), rule.message);\n    }\n\n    if (rule.range && (value < rule.range[0] || value > rule.range[1])) {\n      throw new RuleError(\n        ValidationErrors.range(value, rule.range[0], rule.range[1]),\n        rule.message,\n      );\n    }\n\n    if (rule.integer && !Number.isInteger(value)) {\n      throw new RuleError(ValidationErrors.integer(value), rule.message);\n    }\n\n    if (rule.float && Number.isInteger(value)) {\n      throw new RuleError(ValidationErrors.float(value), rule.message);\n    }\n\n    if (rule.positive && value < 0) {\n      throw new RuleError(ValidationErrors.positive(value), rule.message);\n    }\n\n    if (rule.negative && value > 0) {\n      throw new RuleError(ValidationErrors.negative(value), rule.message);\n    }\n  }\n\n  public parseBoolean(\n    propertyKey: string,\n    rule: RuleType,\n    inputBody: InputBody,\n  ): void {\n    this.checkIfRequired(rule, inputBody, propertyKey);\n    if (Object.hasOwnProperty.call(inputBody, propertyKey) === false) {\n      return;\n    }\n\n    if (rule.nullable && inputBody[propertyKey] === null) {\n      return;\n    }\n\n    this.checkType(\n      propertyKey,\n      inputBody[propertyKey],\n      \"boolean\",\n      rule.message,\n    );\n  }\n\n  public parseDate(\n    propertyKey: string,\n    rule: RuleType,\n    inputBody: InputBody,\n  ): void {\n    this.checkIfRequired(rule, inputBody, propertyKey);\n    if (Object.hasOwnProperty.call(inputBody, propertyKey) === false) {\n      return;\n    }\n\n    if (rule.nullable && inputBody[propertyKey] === null) {\n      return;\n    }\n\n    this.checkType(propertyKey, inputBody[propertyKey], \"Date\", rule.message);\n\n    const value = inputBody[propertyKey] as Date;\n    if (rule.before && value.getTime() >= rule.before.getTime()) {\n      throw new RuleError(\n        ValidationErrors.before(value, rule.before),\n        rule.message,\n      );\n    }\n\n    if (rule.after && value.getTime() <= rule.after.getTime()) {\n      throw new RuleError(\n        ValidationErrors.after(value, rule.after),\n        rule.message,\n      );\n    }\n\n    if (rule.beforeOrEqual && value.getTime() > rule.beforeOrEqual.getTime()) {\n      throw new RuleError(\n        ValidationErrors.beforeOrEqual(value, rule.beforeOrEqual),\n        rule.message,\n      );\n    }\n\n    if (rule.afterOrEqual && value.getTime() < rule.afterOrEqual.getTime()) {\n      throw new RuleError(\n        ValidationErrors.afterOrEqual(value, rule.afterOrEqual),\n        rule.message,\n      );\n    }\n  }\n\n  public parseFunction(\n    propertyKey: string,\n    rule: RuleType,\n    inputBody: InputBody,\n  ) {\n    this.checkIfRequired(rule, inputBody, propertyKey);\n    if (Object.hasOwnProperty.call(inputBody, propertyKey) === false) {\n      return;\n    }\n    this.checkType(\n      propertyKey,\n      inputBody[propertyKey],\n      \"Function\",\n      rule.message,\n    );\n\n    const value = inputBody[propertyKey] as Function;\n\n    if (rule.returns) {\n      if (typeof value() !== rule.returns) {\n        throw new RuleError(\n          ValidationErrors.type(propertyKey, rule.returns),\n          rule.message,\n        );\n      }\n    }\n  }\n\n  public parseObject(\n    propertyKey: string,\n    rule: RuleType,\n    inputBody: InputBody,\n  ) {\n    this.checkIfRequired(rule, inputBody, propertyKey);\n    if (!Object.hasOwnProperty.call(inputBody, propertyKey)) {\n      return;\n    }\n\n    if (rule.nullable && inputBody[propertyKey] === null) {\n      return;\n    }\n\n    this.checkType(propertyKey, inputBody[propertyKey], \"object\", rule.message);\n\n    const members = rule.members;\n    if (!members) {\n      return;\n    }\n\n    const value = inputBody[propertyKey] as Record<string, any>;\n    Object.entries(value).forEach(([key, item]) => {\n      if (members.type === \"string\") {\n        this.parseString(key, members, { [key]: item });\n      } else if (members.type === \"number\") {\n        this.parseNumber(key, members, { [key]: item });\n      } else if (members.type === \"boolean\") {\n        this.parseBoolean(key, members, { [key]: item });\n      } else if (members.type === \"object\") {\n        this.parseObject(key, members, { [key]: item });\n      } else if (members.type === \"function\") {\n        this.parseFunction(key, members, { [key]: item });\n      } else if (members.type === \"Date\") {\n        this.parseDate(key, members, { [key]: item });\n      } else if (members.type === \"Array\") {\n        this.parseArray(key, members, { [key]: item });\n      } else {\n        throw new RuleError(ValidationErrors.type(key, \"unknown\"));\n      }\n    });\n  }\n\n  public parseArray(propertyKey: string, rule: RuleType, inputBody: InputBody) {\n    this.checkIfRequired(rule, inputBody, propertyKey);\n    if (!Object.hasOwnProperty.call(inputBody, propertyKey)) {\n      return;\n    }\n\n    if (rule.nullable && inputBody[propertyKey] === null) {\n      return;\n    }\n\n    this.checkType(propertyKey, inputBody[propertyKey], \"Array\");\n\n    const members = rule.members;\n    if (!members) {\n      return;\n    }\n\n    if (members.type === \"string\") {\n      const value = inputBody[propertyKey] as string[];\n      value.forEach((item) => {\n        this.parseString(propertyKey, members, { [propertyKey]: item });\n      });\n    } else if (members.type === \"number\") {\n      const value = inputBody[propertyKey] as number[];\n      value.forEach((item) => {\n        this.parseNumber(propertyKey, members, { [propertyKey]: item });\n      });\n    } else if (members.type === \"boolean\") {\n      const value = inputBody[propertyKey] as boolean[];\n      value.forEach((item) => {\n        this.parseBoolean(propertyKey, members, { [propertyKey]: item });\n      });\n    } else if (members.type === \"object\") {\n      const value = inputBody[propertyKey] as object[];\n      value.forEach((item) => {\n        this.parseObject(propertyKey, members, { [propertyKey]: item });\n      });\n    } else if (members.type === \"function\") {\n      const value = inputBody[propertyKey] as Function[];\n      value.forEach((item) => {\n        this.parseFunction(propertyKey, members, { [propertyKey]: item });\n      });\n    } else if (members.type === \"Date\") {\n      const value = inputBody[propertyKey] as Date[];\n      value.forEach((item) => {\n        this.parseDate(propertyKey, members, { [propertyKey]: item });\n      });\n    } else if (members.type === \"Array\") {\n      const value = inputBody[propertyKey] as Array<any>[];\n      value.forEach((item) => {\n        this.parseArray(propertyKey, members, { [propertyKey]: item });\n      });\n    } else {\n      throw new RuleError(ValidationErrors.type(propertyKey, \"unknown\"));\n    }\n  }\n\n  private parseStringRuleOptions(value: string, options: OptionType): string {\n    if (options.trim) {\n      value = value.trim();\n    }\n\n    if (options.lowercase) {\n      value = value.toLowerCase();\n    }\n\n    if (options.uppercase) {\n      value = value.toUpperCase();\n    }\n\n    if (options.pascalCase) {\n      value = new RegExp(/^[A-Z][a-z]+$/).test(value)\n        ? value\n        : value[0].toUpperCase() + value.slice(1).toLowerCase();\n    }\n\n    if (options.camelCase) {\n      value = new RegExp(/^[a-z]+$/).test(value)\n        ? value\n        : value[0].toLowerCase() + value.slice(1).toUpperCase();\n    }\n\n    if (options.snakeCase) {\n      value = value.replace(/\\s+/g, \"_\");\n    }\n\n    return value;\n  }\n}\n\nexport default new RuleBuilderParser();\n","import { InputBody } from \"./ValidatorTypes\";\nimport ValidatorSchema from \"./ValidatorSchema\";\nimport StringBuilder from \"../Rule/RuleBuilder/RuleBuilderDataType/StringBuilder\";\nimport NumberBuilder from \"../Rule/RuleBuilder/RuleBuilderDataType/NumberBuilder\";\nimport BooleanBuilder from \"../Rule/RuleBuilder/RuleBuilderDataType/BooleanBuilder\";\nimport ObjectBuilder from \"../Rule/RuleBuilder/RuleBuilderDataType/ObjectBuilder\";\nimport ArrayBuilder from \"../Rule/RuleBuilder/RuleBuilderDataType/ArrayBuilder\";\nimport FunctionBuilder from \"../Rule/RuleBuilder/RuleBuilderDataType/FunctionBuilder\";\nimport DateBuilder from \"../Rule/RuleBuilder/RuleBuilderDataType/DateBuilder\";\nimport RuleBuilderUtils from \"../Rule/RuleBuilder/RuleBuilderParser\";\n\nexport default class Validator {\n  /**\n   * @description - Validates the body of the request, throws an error if the body is invalid\n   * @param {InputBody} body - The body of the request\n   * @param {ValidatorSchema} validatorSchema - The schema of the validator\n   * @returns {Object} - Returns the validated object\n   */\n  public validate<T extends ValidatorSchema>(\n    body: InputBody,\n    validatorSchema: T,\n  ): InputBody {\n    const validatedBody = {} as InputBody;\n    const schema = validatorSchema.getSchemaRules();\n\n    Object.entries(schema).forEach(([key, value]) => {\n      if (value instanceof StringBuilder) {\n        const rule = value.getRule();\n        validatedBody[key] =\n          RuleBuilderUtils.parseString(key, rule.getRule(), body) || null;\n      } else if (value instanceof NumberBuilder) {\n        const rule = value.getRule();\n        RuleBuilderUtils.parseNumber(key, rule.getRule(), body);\n        validatedBody[key] = body[key];\n      } else if (value instanceof BooleanBuilder) {\n        const rule = value.getRule();\n        RuleBuilderUtils.parseBoolean(key, rule.getRule(), body);\n        validatedBody[key] = body[key];\n      } else if (value instanceof ObjectBuilder) {\n        const rule = value.getRule();\n        RuleBuilderUtils.parseObject(key, rule.getRule(), body);\n        validatedBody[key] = body[key];\n      } else if (value instanceof DateBuilder) {\n        const rule = value.getRule();\n        RuleBuilderUtils.parseDate(key, rule.getRule(), body);\n        validatedBody[key] = body[key];\n      } else if (value instanceof FunctionBuilder) {\n        const rule = value.getRule();\n        RuleBuilderUtils.parseFunction(key, rule.getRule(), body);\n        validatedBody[key] = body[key];\n      } else {\n        const rule = value.getRule();\n        RuleBuilderUtils.parseArray(key, rule.getRule(), body);\n        validatedBody[key] = body[key];\n      }\n    });\n\n    return validatedBody;\n  }\n\n  /**\n   * @description - Checks if the body of the request is valid\n   * @param {InputBody} body - The body of the request\n   * @param {ValidatorSchema} validatorSchema - The schema of the validator\n   * @returns {boolean} - Returns true if the body is valid, false otherwise\n   */\n  public isValid<T>(body: InputBody, validatorSchema: T): boolean {\n    try {\n      this.validate(body, validatorSchema as ValidatorSchema);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n","import { RuleType } from \"./RuleTypes\";\n\nexport default class Rule {\n  protected rule: RuleType;\n\n  constructor(rule: RuleType = {} as RuleType) {\n    this.rule = rule;\n  }\n\n  public setRule(rule: RuleType): void {\n    this.rule = {\n      ...this.rule,\n      ...rule,\n    };\n  }\n\n  public getRule(): RuleType {\n    return this.rule;\n  }\n}\n","import Rule from \"../../Rule\";\nimport AbstractDataRuleBuilder from \"./AbstractDataRuleBuilder\";\nimport { RuleType } from \"../../RuleTypes\";\nimport { ValidatorSchemaRule } from \"../../../Validator/ValidatorTypes\";\n\nexport default class ArrayBuilder extends AbstractDataRuleBuilder {\n  public constructor(rule: Rule) {\n    super(rule);\n  }\n\n  public members(members: AbstractDataRuleBuilder): AbstractDataRuleBuilder {\n    this.rule.setRule({ members: members.getRule().getRule() });\n    return this;\n  }\n}\n","import Rule from \"../Rule\";\nimport StringBuilder from \"./RuleBuilderDataType/StringBuilder\";\nimport NumberBuilder from \"./RuleBuilderDataType/NumberBuilder\";\nimport BooleanBuilder from \"./RuleBuilderDataType/BooleanBuilder\";\nimport ObjectBuilder from \"./RuleBuilderDataType/ObjectBuilder\";\nimport FunctionBuilder from \"./RuleBuilderDataType/FunctionBuilder\";\nimport DateBuilder from \"./RuleBuilderDataType/DateBuilder\";\nimport ArrayBuilder from \"./RuleBuilderDataType/ArrayBuilder\";\n\nexport default class RuleBuilder {\n  protected rule: Rule;\n  public constructor() {\n    this.rule = new Rule();\n  }\n\n  public required(): RuleBuilder {\n    this.rule.setRule({ required: true });\n    return this;\n  }\n\n  public string(): StringBuilder {\n    this.rule.setRule({ type: \"string\" });\n    return new StringBuilder(this.rule);\n  }\n\n  public number(): NumberBuilder {\n    this.rule.setRule({ type: \"number\" });\n    return new NumberBuilder(this.rule);\n  }\n\n  public boolean(): BooleanBuilder {\n    this.rule.setRule({ type: \"boolean\" });\n    return new BooleanBuilder(this.rule);\n  }\n\n  public object(): ObjectBuilder {\n    this.rule.setRule({ type: \"object\" });\n    return new ObjectBuilder(this.rule);\n  }\n\n  public function(): FunctionBuilder {\n    this.rule.setRule({ type: \"function\" });\n    return new FunctionBuilder(this.rule);\n  }\n\n  public date(): DateBuilder {\n    this.rule.setRule({ type: \"Date\" });\n    return new DateBuilder(this.rule);\n  }\n\n  public array(): ArrayBuilder {\n    this.rule.setRule({ type: \"Array\" });\n    return new ArrayBuilder(this.rule);\n  }\n}\n","import { ValidatorSchemaRules } from \"./ValidatorTypes\";\nimport RuleBuilder from \"../Rule/RuleBuilder/RuleBuilder\";\n\nexport default abstract class ValidatorSchema {\n  protected schemaRules: ValidatorSchemaRules;\n\n  protected constructor() {\n    this.schemaRules = {};\n    this.setSchemaRules();\n  }\n\n  public rule() {\n    return new RuleBuilder();\n  }\n\n  public getSchemaRules() {\n    return this.schemaRules;\n  }\n\n  public abstract setSchemaRules(): void;\n}\n"],"mappings":"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","names":[]}